{"$message_type":"diagnostic","message":"hard linking files in the incremental compilation cache failed. copying files instead. consider moving the cache directory to a file system which supports hard linking in session dir `/media/thomas/disk thomas/programation/Rust/sym_rustic/target/debug/incremental/utils_tests-2fnbitrwrdd4c/s-h8z2jhxfo9-0mg5xrg-working`","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: hard linking files in the incremental compilation cache failed. copying files instead. consider moving the cache directory to a file system which supports hard linking in session dir `/media/thomas/disk thomas/programation/Rust/sym_rustic/target/debug/incremental/utils_tests-2fnbitrwrdd4c/s-h8z2jhxfo9-0mg5xrg-working`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `calculate_tree` found for enum `Expression` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"tests/utils_tests.rs","byte_start":4628,"byte_end":4848,"line_start":157,"line_end":163,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"        println!(\"{}\", multinomial_expansion(","highlight_start":24,"highlight_end":46},{"text":"            &vec![","highlight_start":1,"highlight_end":19},{"text":"                Expression::Variable(\"a\".to_string()),","highlight_start":1,"highlight_end":55},{"text":"                Expression::Variable(\"b\".to_string()),","highlight_start":1,"highlight_end":55},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            4","highlight_start":1,"highlight_end":14},{"text":"        ).simplify(&mut None).unwrap().calculate_tree(0));","highlight_start":1,"highlight_end":40}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/utils_tests.rs","byte_start":4848,"byte_end":4862,"line_start":163,"line_end":163,"column_start":40,"column_end":54,"is_primary":true,"text":[{"text":"        ).simplify(&mut None).unwrap().calculate_tree(0));","highlight_start":40,"highlight_end":54}],"label":"method not found in `Expression`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `calculate_tree` found for enum `Expression` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/utils_tests.rs:163:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        println!(\"{}\", multinomial_expansion(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m ________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            &vec![\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Expression::Variable(\"a\".to_string()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Expression::Variable(\"b\".to_string()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            4\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).simplify(&mut None).unwrap().calculate_tree(0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Expression`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________________|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `calculate_tree` found for enum `Expression` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"tests/utils_tests.rs","byte_start":4899,"byte_end":6428,"line_start":166,"line_end":202,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"        Expression::Addition(vec![","highlight_start":9,"highlight_end":35},{"text":"            Expression::Exponentiation(","highlight_start":1,"highlight_end":40},{"text":"                Box::new(Expression::Variable(\"a\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"                Box::new(Expression::integer(4))","highlight_start":1,"highlight_end":49},{"text":"            ),","highlight_start":1,"highlight_end":15},{"text":"            Expression::Exponentiation(","highlight_start":1,"highlight_end":40},{"text":"                Box::new(Expression::Variable(\"b\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"                Box::new(Expression::integer(4))","highlight_start":1,"highlight_end":49},{"text":"            ),","highlight_start":1,"highlight_end":15},{"text":"            Expression::Multiplication(vec![","highlight_start":1,"highlight_end":45},{"text":"                Expression::integer(6),","highlight_start":1,"highlight_end":40},{"text":"                Expression::Exponentiation(","highlight_start":1,"highlight_end":44},{"text":"                    Box::new(Expression::Variable(\"a\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"                    Box::new(Expression::integer(2))","highlight_start":1,"highlight_end":53},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"                Expression::Exponentiation(","highlight_start":1,"highlight_end":44},{"text":"                    Box::new(Expression::Variable(\"b\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"                    Box::new(Expression::integer(2))","highlight_start":1,"highlight_end":53},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            ]),","highlight_start":1,"highlight_end":16},{"text":"            Expression::Multiplication(vec![","highlight_start":1,"highlight_end":45},{"text":"                Expression::integer(4),","highlight_start":1,"highlight_end":40},{"text":"                Expression::Exponentiation(","highlight_start":1,"highlight_end":44},{"text":"                    Box::new(Expression::Variable(\"a\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"                    Box::new(Expression::integer(3))","highlight_start":1,"highlight_end":53},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"                Expression::Variable(\"b\".to_string()),","highlight_start":1,"highlight_end":55},{"text":"            ]),","highlight_start":1,"highlight_end":16},{"text":"            Expression::Multiplication(vec![","highlight_start":1,"highlight_end":45},{"text":"                Expression::integer(4),","highlight_start":1,"highlight_end":40},{"text":"                Expression::Exponentiation(","highlight_start":1,"highlight_end":44},{"text":"                    Box::new(Expression::Variable(\"b\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"                    Box::new(Expression::integer(3))","highlight_start":1,"highlight_end":53},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"                Expression::Variable(\"a\".to_string()),","highlight_start":1,"highlight_end":55},{"text":"            ]),","highlight_start":1,"highlight_end":16},{"text":"        ]).calculate_tree(0));","highlight_start":1,"highlight_end":12}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/utils_tests.rs","byte_start":6428,"byte_end":6442,"line_start":202,"line_end":202,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"        ]).calculate_tree(0));","highlight_start":12,"highlight_end":26}],"label":"method not found in `Expression`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `calculate_tree` found for enum `Expression` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/utils_tests.rs:202:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Expression::Addition(vec![\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Expression::Exponentiation(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Box::new(Expression::Variable(\"a\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Box::new(Expression::integer(4))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ]),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ]).calculate_tree(0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Expression`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
